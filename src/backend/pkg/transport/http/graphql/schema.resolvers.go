package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/pixlcrashr/blanner/src/backend/pkg/transport/http/graphql/model"
)

// Book is the resolver for the book field.
func (r *accountResolver) Book(ctx context.Context, obj *model.Account) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// Parent is the resolver for the parent field.
func (r *accountResolver) Parent(ctx context.Context, obj *model.Account) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// IsRootAccount is the resolver for the isRootAccount field.
func (r *accountResolver) IsRootAccount(ctx context.Context, obj *model.Account) (bool, error) {
	panic(fmt.Errorf("not implemented: IsRootAccount - isRootAccount"))
}

// Children is the resolver for the children field.
func (r *accountResolver) Children(ctx context.Context, obj *model.Account) ([]*model.Account, error) {
	panic(fmt.Errorf("not implemented: Children - children"))
}

// Transactions is the resolver for the transactions field.
func (r *accountResolver) Transactions(ctx context.Context, obj *model.Account) ([]*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: Transactions - transactions"))
}

// Accounts is the resolver for the accounts field.
func (r *bookResolver) Accounts(ctx context.Context, obj *model.Book) ([]*model.Account, error) {
	panic(fmt.Errorf("not implemented: Accounts - accounts"))
}

// Period is the resolver for the period field.
func (r *budgetResolver) Period(ctx context.Context, obj *model.Budget) (*model.Period, error) {
	panic(fmt.Errorf("not implemented: Period - period"))
}

// Values is the resolver for the values field.
func (r *budgetResolver) Values(ctx context.Context, obj *model.Budget) ([]*model.BudgetAccountValue, error) {
	panic(fmt.Errorf("not implemented: Values - values"))
}

// Budget is the resolver for the budget field.
func (r *budgetAccountValueResolver) Budget(ctx context.Context, obj *model.BudgetAccountValue) (*model.Budget, error) {
	panic(fmt.Errorf("not implemented: Budget - budget"))
}

// Account is the resolver for the account field.
func (r *budgetAccountValueResolver) Account(ctx context.Context, obj *model.BudgetAccountValue) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: Account - account"))
}

// Currency is the resolver for the currency field.
func (r *moneyResolver) Currency(ctx context.Context, obj *model.Money) (string, error) {
	panic(fmt.Errorf("not implemented: Currency - currency"))
}

// Decimal is the resolver for the decimal field.
func (r *moneyResolver) Decimal(ctx context.Context, obj *model.Money) (float64, error) {
	panic(fmt.Errorf("not implemented: Decimal - decimal"))
}

// Format is the resolver for the format field.
func (r *moneyResolver) Format(ctx context.Context, obj *model.Money) (string, error) {
	panic(fmt.Errorf("not implemented: Format - format"))
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, name string, description string, currency string, startMonth int) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: CreateBook - createBook"))
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id uuid.UUID, name *string, description *string) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: UpdateBook - updateBook"))
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id uuid.UUID) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: DeleteBook - deleteBook"))
}

// CreateBudget is the resolver for the createBudget field.
func (r *mutationResolver) CreateBudget(ctx context.Context, name string, description string, year int) (*model.Budget, error) {
	panic(fmt.Errorf("not implemented: CreateBudget - createBudget"))
}

// UpdateBudget is the resolver for the updateBudget field.
func (r *mutationResolver) UpdateBudget(ctx context.Context, id uuid.UUID, name string, description string, year int) (*model.Budget, error) {
	panic(fmt.Errorf("not implemented: UpdateBudget - updateBudget"))
}

// DeleteBudget is the resolver for the deleteBudget field.
func (r *mutationResolver) DeleteBudget(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBudget - deleteBudget"))
}

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, bookID uuid.UUID, name string, description string, typeArg model.AccountType, code int, parentID *uuid.UUID) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: CreateAccount - createAccount"))
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, id uuid.UUID, name *string, description *string) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// DeleteAccount is the resolver for the deleteAccount field.
func (r *mutationResolver) DeleteAccount(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAccount - deleteAccount"))
}

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, accountID uuid.UUID, value int64, bookedAt time.Time) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: CreateTransaction - createTransaction"))
}

// DeleteTransaction is the resolver for the deleteTransaction field.
func (r *mutationResolver) DeleteTransaction(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTransaction - deleteTransaction"))
}

// ClosePeriod is the resolver for the closePeriod field.
func (r *mutationResolver) ClosePeriod(ctx context.Context, id *uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: ClosePeriod - closePeriod"))
}

// Currencies is the resolver for the currencies field.
func (r *queryResolver) Currencies(ctx context.Context) ([]string, error) {
	panic(fmt.Errorf("not implemented: Currencies - currencies"))
}

// SearchBooks is the resolver for the searchBooks field.
func (r *queryResolver) SearchBooks(ctx context.Context) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: SearchBooks - searchBooks"))
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context, ids []uuid.UUID) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id uuid.UUID) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: Book - book"))
}

// SearchPeriods is the resolver for the searchPeriods field.
func (r *queryResolver) SearchPeriods(ctx context.Context, input model.SearchPeriodsInput) ([]*model.Period, error) {
	panic(fmt.Errorf("not implemented: SearchPeriods - searchPeriods"))
}

// Periods is the resolver for the periods field.
func (r *queryResolver) Periods(ctx context.Context, ids []uuid.UUID) ([]*model.Period, error) {
	panic(fmt.Errorf("not implemented: Periods - periods"))
}

// Period is the resolver for the period field.
func (r *queryResolver) Period(ctx context.Context, id uuid.UUID) (*model.Period, error) {
	panic(fmt.Errorf("not implemented: Period - period"))
}

// SearchBudgets is the resolver for the searchBudgets field.
func (r *queryResolver) SearchBudgets(ctx context.Context, input model.SearchBudgetsInput) ([]*model.Budget, error) {
	panic(fmt.Errorf("not implemented: SearchBudgets - searchBudgets"))
}

// Budgets is the resolver for the budgets field.
func (r *queryResolver) Budgets(ctx context.Context, ids []uuid.UUID) ([]*model.Budget, error) {
	panic(fmt.Errorf("not implemented: Budgets - budgets"))
}

// Budget is the resolver for the budget field.
func (r *queryResolver) Budget(ctx context.Context, id uuid.UUID) (*model.Budget, error) {
	panic(fmt.Errorf("not implemented: Budget - budget"))
}

// SearchAccounts is the resolver for the searchAccounts field.
func (r *queryResolver) SearchAccounts(ctx context.Context, input model.SearchAccountsInput) ([]*model.Account, error) {
	panic(fmt.Errorf("not implemented: SearchAccounts - searchAccounts"))
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context, ids []uuid.UUID) ([]*model.Account, error) {
	panic(fmt.Errorf("not implemented: Accounts - accounts"))
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context, id uuid.UUID) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: Account - account"))
}

// SearchTransactions is the resolver for the searchTransactions field.
func (r *queryResolver) SearchTransactions(ctx context.Context, input model.SearchTransactionsInput) ([]*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: SearchTransactions - searchTransactions"))
}

// Transactions is the resolver for the transactions field.
func (r *queryResolver) Transactions(ctx context.Context, ids []uuid.UUID) ([]*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: Transactions - transactions"))
}

// Transaction is the resolver for the transaction field.
func (r *queryResolver) Transaction(ctx context.Context, id uuid.UUID) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: Transaction - transaction"))
}

// Account is the resolver for the account field.
func (r *transactionResolver) Account(ctx context.Context, obj *model.Transaction) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: Account - account"))
}

// Account returns AccountResolver implementation.
func (r *Resolver) Account() AccountResolver { return &accountResolver{r} }

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Budget returns BudgetResolver implementation.
func (r *Resolver) Budget() BudgetResolver { return &budgetResolver{r} }

// BudgetAccountValue returns BudgetAccountValueResolver implementation.
func (r *Resolver) BudgetAccountValue() BudgetAccountValueResolver {
	return &budgetAccountValueResolver{r}
}

// Money returns MoneyResolver implementation.
func (r *Resolver) Money() MoneyResolver { return &moneyResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Transaction returns TransactionResolver implementation.
func (r *Resolver) Transaction() TransactionResolver { return &transactionResolver{r} }

type accountResolver struct{ *Resolver }
type bookResolver struct{ *Resolver }
type budgetResolver struct{ *Resolver }
type budgetAccountValueResolver struct{ *Resolver }
type moneyResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type transactionResolver struct{ *Resolver }
