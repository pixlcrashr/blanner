// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type Account struct {
	ID            uuid.UUID      `json:"id"`
	BookID        uuid.UUID      `json:"bookId"`
	Book          *Book          `json:"book"`
	Name          string         `json:"name"`
	Description   string         `json:"description"`
	Type          AccountType    `json:"type"`
	ParentID      *uuid.UUID     `json:"parentId,omitempty"`
	Parent        *Account       `json:"parent,omitempty"`
	IsRootAccount bool           `json:"isRootAccount"`
	Code          int            `json:"code"`
	Children      []*Account     `json:"children"`
	CreatedAt     time.Time      `json:"createdAt"`
	UpdatedAt     time.Time      `json:"updatedAt"`
	Transactions  []*Transaction `json:"transactions"`
}

type Book struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Currency    string     `json:"currency"`
	StartMonth  int        `json:"startMonth"`
	Accounts    []*Account `json:"accounts"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   time.Time  `json:"updatedAt"`
}

type Budget struct {
	ID          uuid.UUID             `json:"id"`
	Name        string                `json:"name"`
	Description string                `json:"description"`
	PeriodID    uuid.UUID             `json:"periodId"`
	Period      *Period               `json:"period"`
	CreatedAt   time.Time             `json:"createdAt"`
	UpdatedAt   time.Time             `json:"updatedAt"`
	Values      []*BudgetAccountValue `json:"values"`
}

type BudgetAccountValue struct {
	BudgetID  uuid.UUID `json:"budgetId"`
	Budget    *Budget   `json:"budget"`
	AccountID uuid.UUID `json:"accountId"`
	Account   *Account  `json:"account"`
	Value     *Money    `json:"value"`
}

type Money struct {
	Currency string  `json:"currency"`
	MinUnit  int64   `json:"minUnit"`
	Decimal  float64 `json:"decimal"`
	Format   string  `json:"format"`
}

type Mutation struct {
}

type Period struct {
	ID        uuid.UUID `json:"id"`
	BookID    uuid.UUID `json:"bookId"`
	Year      int       `json:"year"`
	IsClosed  bool      `json:"isClosed"`
	CreatedAt time.Time `json:"createdAt"`
}

type Query struct {
}

type SearchAccountsInput struct {
	BookID   *uuid.UUID `json:"bookId,omitempty"`
	ParentID *uuid.UUID `json:"parentId,omitempty"`
}

type SearchBudgetsInput struct {
	PeriodID *uuid.UUID `json:"periodId,omitempty"`
	BookID   *uuid.UUID `json:"bookId,omitempty"`
}

type SearchPeriodsInput struct {
	BookID *uuid.UUID `json:"bookId,omitempty"`
}

type SearchTransactionsInput struct {
	AccountID *uuid.UUID `json:"accountId,omitempty"`
}

type Transaction struct {
	ID          uuid.UUID `json:"id"`
	AccountID   uuid.UUID `json:"accountId"`
	Account     *Account  `json:"account"`
	Value       *Money    `json:"value"`
	Description string    `json:"description"`
	BookedAt    time.Time `json:"bookedAt"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type AccountType string

const (
	AccountTypeIncome  AccountType = "INCOME"
	AccountTypeExpense AccountType = "EXPENSE"
)

var AllAccountType = []AccountType{
	AccountTypeIncome,
	AccountTypeExpense,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeIncome, AccountTypeExpense:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
