// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// TransactionsProviderImportParams is parameters of transactions-provider-import operation.
type TransactionsProviderImportParams struct {
	// Provider.
	Provider TransactionsProviderImportProvider
	// Book ID to get bookable transactions for.
	BookID string
}

func unpackTransactionsProviderImportParams(packed middleware.Parameters) (params TransactionsProviderImportParams) {
	{
		key := middleware.ParameterKey{
			Name: "provider",
			In:   "query",
		}
		params.Provider = packed[key].(TransactionsProviderImportProvider)
	}
	{
		key := middleware.ParameterKey{
			Name: "book_id",
			In:   "query",
		}
		params.BookID = packed[key].(string)
	}
	return params
}

func decodeTransactionsProviderImportParams(args [0]string, argsEscaped bool, r *http.Request) (params TransactionsProviderImportParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: provider.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "provider",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Provider = TransactionsProviderImportProvider(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Provider.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "provider",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: book_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "book_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BookID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "book_id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
