// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Error ErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() ErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val ErrorError) {
	s.Error = val
}

type ErrorError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ErrorError) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ErrorError) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ErrorError) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/ProviderImportTransaction
type ProviderImportTransaction struct {
	// Index of the bookable transaction.
	Index         float64 `json:"index"`
	ReceiptDate   string  `json:"receipt_date"`
	BookedAt      string  `json:"booked_at"`
	Description   string  `json:"description"`
	Amount        float64 `json:"amount"`
	DebitAccount  string  `json:"debit_account"`
	CreditAccount string  `json:"credit_account"`
	Reference     string  `json:"reference"`
}

// GetIndex returns the value of Index.
func (s *ProviderImportTransaction) GetIndex() float64 {
	return s.Index
}

// GetReceiptDate returns the value of ReceiptDate.
func (s *ProviderImportTransaction) GetReceiptDate() string {
	return s.ReceiptDate
}

// GetBookedAt returns the value of BookedAt.
func (s *ProviderImportTransaction) GetBookedAt() string {
	return s.BookedAt
}

// GetDescription returns the value of Description.
func (s *ProviderImportTransaction) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *ProviderImportTransaction) GetAmount() float64 {
	return s.Amount
}

// GetDebitAccount returns the value of DebitAccount.
func (s *ProviderImportTransaction) GetDebitAccount() string {
	return s.DebitAccount
}

// GetCreditAccount returns the value of CreditAccount.
func (s *ProviderImportTransaction) GetCreditAccount() string {
	return s.CreditAccount
}

// GetReference returns the value of Reference.
func (s *ProviderImportTransaction) GetReference() string {
	return s.Reference
}

// SetIndex sets the value of Index.
func (s *ProviderImportTransaction) SetIndex(val float64) {
	s.Index = val
}

// SetReceiptDate sets the value of ReceiptDate.
func (s *ProviderImportTransaction) SetReceiptDate(val string) {
	s.ReceiptDate = val
}

// SetBookedAt sets the value of BookedAt.
func (s *ProviderImportTransaction) SetBookedAt(val string) {
	s.BookedAt = val
}

// SetDescription sets the value of Description.
func (s *ProviderImportTransaction) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *ProviderImportTransaction) SetAmount(val float64) {
	s.Amount = val
}

// SetDebitAccount sets the value of DebitAccount.
func (s *ProviderImportTransaction) SetDebitAccount(val string) {
	s.DebitAccount = val
}

// SetCreditAccount sets the value of CreditAccount.
func (s *ProviderImportTransaction) SetCreditAccount(val string) {
	s.CreditAccount = val
}

// SetReference sets the value of Reference.
func (s *ProviderImportTransaction) SetReference(val string) {
	s.Reference = val
}

type TransactionsProviderImportProvider string

const (
	TransactionsProviderImportProviderLexware TransactionsProviderImportProvider = "lexware"
)

// AllValues returns all TransactionsProviderImportProvider values.
func (TransactionsProviderImportProvider) AllValues() []TransactionsProviderImportProvider {
	return []TransactionsProviderImportProvider{
		TransactionsProviderImportProviderLexware,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransactionsProviderImportProvider) MarshalText() ([]byte, error) {
	switch s {
	case TransactionsProviderImportProviderLexware:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransactionsProviderImportProvider) UnmarshalText(data []byte) error {
	switch TransactionsProviderImportProvider(data) {
	case TransactionsProviderImportProviderLexware:
		*s = TransactionsProviderImportProviderLexware
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TransactionsProviderImportReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s TransactionsProviderImportReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}
