scalar Long
scalar Date
scalar DateTime
scalar Double
scalar Currency

scalar BookId
scalar PeriodId
scalar BudgetId
scalar AccountId
scalar TransactionId
scalar BudgetAccountTargetId
scalar AccountGroupingId

type Money {
    currency: Currency!
    minUnit: Long!
    decimal: Double!
    format: String!
}

type Book {
    id: BookId!
    name: String!
    description: String!
    currency: Currency!
    startMonth: Int!
    accounts: [Account!]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Period {
    id: PeriodId!
    bookId: BookId!
    year: Int!
    isClosed: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Budget {
    id: BudgetId!
    name: String!
    description: String!
    periodId: PeriodId!
    period: Period!
    createdAt: DateTime!
    updatedAt: DateTime!
    actualValues: [BudgetAccountActual!]!
    targetValues: [BudgetAccountTarget!]!
}

type BudgetAccountTarget {
    id: BudgetAccountTargetId!
    budgetId: BudgetId!
    budget: Budget!
    accountId: AccountId!
    account: Account!
    value: Money!
    createdAt: DateTime!
    updatedAt: DateTime!
}

# computed type
type BudgetAccountActual {
    budgetId: BudgetId!
    budget: Budget!
    accountId: AccountId!
    account: Account!
    value: Money!
}

enum AccountType {
    INCOME
    EXPENSE
}

type AccountBudgetValue {
    budgetId: BudgetId!
    budget: Budget!
    target: Money!
    actual: Money!
    difference: Money!
}

type Account {
    id: AccountId!
    bookId: BookId!
    book: Book!
    name: String!
    description: String!
    type: AccountType!
    parentId: AccountId
    parent: Account
    isParent: Boolean!
    isGroup: Boolean!
    code: String!
    fullCode: String!
    depth: Int!
    children: [Account!]!
    createdAt: DateTime!
    updatedAt: DateTime!
    transactions: [Transaction!]!
    budgetValues: [AccountBudgetValue!]!
}

type AccountGrouping {
    id: AccountGroupingId!
    name: String!
    description: String!
    bookId: BookId!
    book: Book!
    accountIds: [AccountId!]!
    accounts: [Account!]!
    sumPeriod(periodId: PeriodId!): Money!
}

type Transaction {
    id: TransactionId!
    accountId: AccountId!
    account: Account!
    value: Money!
    description: String!
    reference: String!
    importProvider: ImportProvider
    importReference: String
    isImported: Boolean!
    bookedAt: Date!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type MatrixAccountNode {
    parentIndex: Int
    depth: Int!
    accountId: AccountId!
    account: Account!
}

type MatrixBudgetNode {
    budgetId: BudgetId!
    budget: Budget!
}

type MatrixValue {
    target: Money!
    actual: Money!
    difference: Money!
}

type Matrix {
    accounts: [MatrixAccountNode!]!
    budgets: [MatrixBudgetNode!]!
    # outer array is mapped to the accounts, inner array is mapped to the budgets; so a 2x2xn array
    values: [[MatrixValue!]!]!
    maxDepth: Int!
}

input SearchPeriodsInput {
    bookId: BookId
}

input SearchBudgetsInput {
    periodId: PeriodId
    bookId: BookId
}

input SearchAccountsInput {
    bookId: BookId
    parentId: AccountId
    isGroup: Boolean
}

input SearchTransactionsInput {
    bookId: BookId
    accountId: AccountId
}

input MatrixInput {
    bookId: BookId!
    ignoreBudgets: [BudgetId!]
    ignoreAccounts: [AccountId!]
}

input SearchAccountGroupingsInput {
    bookId: BookId!
}

type Query {
    currencies: [Currency!]!

    searchBooks: [Book!]!
    books(ids: [BookId!]!): [Book]!
    book(id: BookId!): Book

    searchPeriods(input: SearchPeriodsInput!): [Period!]!
    periods(ids: [PeriodId!]!): [Period]!
    period(id: PeriodId!): Period

    searchBudgets(input: SearchBudgetsInput!): [Budget!]!
    budgets(ids: [BudgetId!]!): [Budget]!
    budget(id: BudgetId!): Budget

    searchAccounts(input: SearchAccountsInput!): [Account!]!
    accounts(ids: [AccountId!]!): [Account]!
    account(id: AccountId!): Account

    searchTransactions(input: SearchTransactionsInput!): [Transaction!]!
    transactions(ids: [TransactionId!]!): [Transaction]!
    transaction(id: TransactionId!): Transaction

    accountGrouping(id: AccountGroupingId!): AccountGrouping
    searchAccountGroupings(input: SearchAccountGroupingsInput!): [AccountGrouping!]!
    accountGroupings(ids: [AccountGroupingId!]!): [AccountGrouping]!

    matrix(
        input: MatrixInput!
    ): Matrix!
}

enum ImportProvider {
    LEXWARE
}

type Mutation {
    createBook(
        name: String!
        description: String!
        currency: Currency!
        startMonth: Int!
    ): Book!
    updateBook(
        id: BookId!
        name: String
        description: String
    ): Book!
    deleteBook(
        id: BookId!
    ): Boolean!

    createBudget(
        bookId: BookId!
        name: String!
        description: String!
        year: Int!
    ): Budget!
    updateBudget(
        id: BudgetId!
        name: String
        description: String
        year: Int
    ): Budget!
    deleteBudget(
        id: BudgetId!
    ): Boolean!
    setBudgetAccountTarget(
        id: BudgetId!
        accountId: AccountId!
        value: Long!
    ): Boolean!
    deleteBudgetAccountTarget(
        id: BudgetId!
        accountId: AccountId!
    ): Boolean!

    createAccount(
        bookId: BookId!
        name: String!
        description: String!
        type: AccountType!
        code: String!
        isGroup: Boolean!
        parentId: AccountId # optional
    ): Account!
    updateAccount(
        id: AccountId!
        name: String
        description: String
    ): Account!
    deleteAccount(
        id: AccountId!
    ): Boolean!

    createTransaction(
        accountId: AccountId!
        value: Long!
        description: String!
        bookedAt: Date!
        importProvider: ImportProvider
        importReference: String
    ): Transaction!
    updateTransaction(
        id: TransactionId!
        accountId: AccountId
    ): Transaction!
    deleteTransaction(
        id: TransactionId!
    ): Boolean!

    createAccountGrouping(
        name: String!
        description: String!
        bookId: BookId!
        accountIds: [AccountId!]!
    ): AccountGrouping
    updateAccountGrouping(
        id: AccountGroupingId!
        name: String
        description: String
        accountIds: [AccountId!]
    ): Boolean!
    deleteAccountGrouping(
        id: AccountGroupingId!
    ): Boolean!

    closePeriod(
        id: PeriodId!
    ): Boolean!

    ignoreImportReference(
        bookID: BookId!
        provider: ImportProvider!
        reference: String!
    ): Boolean!
}
