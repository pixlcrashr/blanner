// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type Account struct {
	ID           uuid.UUID             `json:"id"`
	BookID       uuid.UUID             `json:"bookId"`
	Book         *Book                 `json:"book"`
	Name         string                `json:"name"`
	Description  string                `json:"description"`
	Type         AccountType           `json:"type"`
	ParentID     *uuid.UUID            `json:"parentId,omitempty"`
	Parent       *Account              `json:"parent,omitempty"`
	IsParent     bool                  `json:"isParent"`
	IsGroup      bool                  `json:"isGroup"`
	Code         string                `json:"code"`
	FullCode     string                `json:"fullCode"`
	Depth        int                   `json:"depth"`
	Children     []*Account            `json:"children"`
	CreatedAt    time.Time             `json:"createdAt"`
	UpdatedAt    time.Time             `json:"updatedAt"`
	Transactions []*Transaction        `json:"transactions"`
	BudgetValues []*AccountBudgetValue `json:"budgetValues"`
}

type AccountBudgetValue struct {
	BudgetID   uuid.UUID `json:"budgetId"`
	Budget     *Budget   `json:"budget"`
	Target     *Money    `json:"target"`
	Actual     *Money    `json:"actual"`
	Difference *Money    `json:"difference"`
}

type AccountGrouping struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	BookID      uuid.UUID   `json:"bookId"`
	Book        *Book       `json:"book"`
	AccountIds  []uuid.UUID `json:"accountIds"`
	Accounts    []*Account  `json:"accounts"`
	SumPeriod   *Money      `json:"sumPeriod"`
}

type Book struct {
	ID          uuid.UUID  `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Currency    string     `json:"currency"`
	StartMonth  int        `json:"startMonth"`
	Accounts    []*Account `json:"accounts"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   time.Time  `json:"updatedAt"`
}

type Budget struct {
	ID           uuid.UUID              `json:"id"`
	Name         string                 `json:"name"`
	Description  string                 `json:"description"`
	PeriodID     uuid.UUID              `json:"periodId"`
	Period       *Period                `json:"period"`
	CreatedAt    time.Time              `json:"createdAt"`
	UpdatedAt    time.Time              `json:"updatedAt"`
	ActualValues []*BudgetAccountActual `json:"actualValues"`
	TargetValues []*BudgetAccountTarget `json:"targetValues"`
}

type BudgetAccountActual struct {
	BudgetID  uuid.UUID `json:"budgetId"`
	Budget    *Budget   `json:"budget"`
	AccountID uuid.UUID `json:"accountId"`
	Account   *Account  `json:"account"`
	Value     *Money    `json:"value"`
}

type BudgetAccountTarget struct {
	ID        uuid.UUID `json:"id"`
	BudgetID  uuid.UUID `json:"budgetId"`
	Budget    *Budget   `json:"budget"`
	AccountID uuid.UUID `json:"accountId"`
	Account   *Account  `json:"account"`
	Value     *Money    `json:"value"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type Matrix struct {
	Accounts []*MatrixAccountNode `json:"accounts"`
	Budgets  []*MatrixBudgetNode  `json:"budgets"`
	Values   [][]*MatrixValue     `json:"values"`
	MaxDepth int                  `json:"maxDepth"`
}

type MatrixAccountNode struct {
	ParentIndex *int      `json:"parentIndex,omitempty"`
	Depth       int       `json:"depth"`
	AccountID   uuid.UUID `json:"accountId"`
	Account     *Account  `json:"account"`
}

type MatrixBudgetNode struct {
	BudgetID uuid.UUID `json:"budgetId"`
	Budget   *Budget   `json:"budget"`
}

type MatrixInput struct {
	BookID         uuid.UUID   `json:"bookId"`
	IgnoreBudgets  []uuid.UUID `json:"ignoreBudgets,omitempty"`
	IgnoreAccounts []uuid.UUID `json:"ignoreAccounts,omitempty"`
}

type MatrixValue struct {
	Target     *Money `json:"target"`
	Actual     *Money `json:"actual"`
	Difference *Money `json:"difference"`
}

type Money struct {
	Currency string  `json:"currency"`
	MinUnit  int64   `json:"minUnit"`
	Decimal  float64 `json:"decimal"`
	Format   string  `json:"format"`
}

type Mutation struct {
}

type Period struct {
	ID        uuid.UUID `json:"id"`
	BookID    uuid.UUID `json:"bookId"`
	Year      int       `json:"year"`
	IsClosed  bool      `json:"isClosed"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type Query struct {
}

type SearchAccountGroupingsInput struct {
	BookID uuid.UUID `json:"bookId"`
}

type SearchAccountsInput struct {
	BookID   *uuid.UUID `json:"bookId,omitempty"`
	ParentID *uuid.UUID `json:"parentId,omitempty"`
	IsGroup  *bool      `json:"isGroup,omitempty"`
}

type SearchBudgetsInput struct {
	PeriodID *uuid.UUID `json:"periodId,omitempty"`
	BookID   *uuid.UUID `json:"bookId,omitempty"`
}

type SearchPeriodsInput struct {
	BookID *uuid.UUID `json:"bookId,omitempty"`
}

type SearchTransactionsInput struct {
	BookID    *uuid.UUID `json:"bookId,omitempty"`
	AccountID *uuid.UUID `json:"accountId,omitempty"`
}

type Transaction struct {
	ID              uuid.UUID       `json:"id"`
	AccountID       uuid.UUID       `json:"accountId"`
	Account         *Account        `json:"account"`
	Value           *Money          `json:"value"`
	Description     string          `json:"description"`
	Reference       string          `json:"reference"`
	ImportProvider  *ImportProvider `json:"importProvider,omitempty"`
	ImportReference *string         `json:"importReference,omitempty"`
	IsImported      bool            `json:"isImported"`
	BookedAt        time.Time       `json:"bookedAt"`
	CreatedAt       time.Time       `json:"createdAt"`
	UpdatedAt       time.Time       `json:"updatedAt"`
}

type AccountType string

const (
	AccountTypeIncome  AccountType = "INCOME"
	AccountTypeExpense AccountType = "EXPENSE"
)

var AllAccountType = []AccountType{
	AccountTypeIncome,
	AccountTypeExpense,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeIncome, AccountTypeExpense:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImportProvider string

const (
	ImportProviderLexware ImportProvider = "LEXWARE"
)

var AllImportProvider = []ImportProvider{
	ImportProviderLexware,
}

func (e ImportProvider) IsValid() bool {
	switch e {
	case ImportProviderLexware:
		return true
	}
	return false
}

func (e ImportProvider) String() string {
	return string(e)
}

func (e *ImportProvider) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImportProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImportProvider", str)
	}
	return nil
}

func (e ImportProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
