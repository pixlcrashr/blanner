# Where are all the schema files located? globs are supported eg. src/**/*.graphqls
schema:
  - pkg/transport/graphql/*.graphqls

# Where should the generated server code go?
exec:
  filename: pkg/transport/graphql/schema.go
  package: graphql

# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph

# Where should any generated models go?
model:
  filename: pkg/transport/graphql/model/model.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: pkg/transport/graphql
  package: graphql
  filename_template: "{name}.resolvers.go"
  # Optional: turn on to not generate template comments above resolvers
  # omit_template_comment: false

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn on to omit Is<Name>() methods to interface and unions
# omit_interface_checks : true

# Optional: turn on to skip generation of ComplexityRoot struct content and Complexity function
# omit_complexity: false

# Optional: turn on to not generate any file notice comments in generated files
# omit_gqlgen_file_notice: false

# Optional: turn on to exclude the gqlgen version in the generated file notice. No effect if `omit_gqlgen_file_notice` is true.
# omit_gqlgen_version_in_file_notice: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: turn on to return pointers instead of values in unmarshalInput
# return_pointers_in_unmarshalinput: false

# Optional: wrap nullable input fields with Omittable
# nullable_input_omittable: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# Optional: set to skip running `go mod tidy` when generating server code
# skip_mod_tidy: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
#  - "github.com/theater-improrama/hydra/src/backend/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  # scalars
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int32
  Long:
    model:
      - github.com/99designs/gqlgen/graphql.Int64
  Double:
    model:
      - github.com/99designs/gqlgen/graphql.Float
  DateTime:
    model:
      - github.com/99designs/gqlgen/graphql.Time
  Date:
    model:
      - github.com/pixlcrashr/blanner/src/backend/pkg/transport/graphql/model.Date
  Currency:
    model:
      - github.com/99designs/gqlgen/graphql.String
  BookId:
    model:
      - github.com/99designs/gqlgen/graphql.UUID
  PeriodId:
    model:
      - github.com/99designs/gqlgen/graphql.UUID
  BudgetId:
    model:
      - github.com/99designs/gqlgen/graphql.UUID
  AccountId:
    model:
      - github.com/99designs/gqlgen/graphql.UUID
  BudgetAccountTargetId:
    model:
      - github.com/99designs/gqlgen/graphql.UUID
  TransactionId:
    model:
      - github.com/99designs/gqlgen/graphql.UUID
  
  # objects
  Money:
    fields:
      currency:
        resolver: true
      decimal:
        resolver: true
      format:
        resolver: true
  Book:
    fields:
      accounts:
        resolver: true
  Budget:
    fields:
      period:
        resolver: true
      actualValues:
        resolver: true
      targetValues:
        resolver: true
  BudgetAccountTarget:
    fields:
      budget:
        resolver: true
      account:
        resolver: true
  BudgetAccountActual:
    fields:
      budget:
        resolver: true
      account:
        resolver: true
  Account:
    fields:
      book:
        resolver: true
      parent:
        resolver: true
      isParent:
        resolver: true
      children:
        resolver: true
      transactions:
        resolver: true
      budgetValues:
        resolver: true
      fullCode:
        resolver: true
      depth:
        resolver: true
  MatrixAccountNode:
    fields:
      account:
        resolver: true
  MatrixBudgetNode:
    fields:
      budget:
        resolver: true
  AccountBudgetValue:
    fields:
      budget:
        resolver: true
  Transaction:
    fields:
      account:
        resolver: true
      isImported:
        resolver: true